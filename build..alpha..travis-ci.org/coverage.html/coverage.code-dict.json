{"/home/travis/build/npmtest/node-npmtest-yar/test.js":"/* istanbul instrument in package npmtest_yar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-yar/lib.npmtest_yar.js":"/* istanbul instrument in package npmtest_yar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_yar = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_yar = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-yar/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-yar && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_yar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_yar\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_yar.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_yar.rollup.js'] =\n            local.assetsDict['/assets.npmtest_yar.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_yar.__dirname + '/lib.npmtest_yar.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-yar/node_modules/yar/lib/index.js":"'use strict';\n\nconst Hoek = require('hoek');\nconst Statehood = require('statehood');\nconst Uuid = require('uuid');\n\n\n// Declare internals\n\nconst internals = {};\n\n\n// Defaults\n\ninternals.defaults = {\n    cache: {\n        expiresIn: 24 * 60 * 60 * 1000          // One day session\n    },\n    cookieOptions: {                            // hapi server.state() options, except 'encoding' which is always 'iron'. 'password' is required.\n        clearInvalid: true,\n        ignoreErrors: true,\n        isSameSite: 'Lax',                      // Use same-site cookie security, but in a loose way\n        isSecure: true,\n        path: '/'\n    },\n    errorOnCacheNotReady: true,\n    maxCookieSize: 1024,                        // Maximum size allowed in a cookie\n    name: 'session',                            // Cookie name\n    storeBlank: true                           // Initially _isModified\n};\n\n\nexports.register = (server, options, next) => {\n\n    // Validate options and apply defaults\n\n    const settings = Hoek.applyToDefaults(internals.defaults, options);\n    Hoek.assert(!settings.cookieOptions.encoding, 'Cannot override cookie encoding');\n    const rawCookieOptions = Hoek.clone(settings.cookieOptions);\n    settings.cookieOptions.encoding = 'iron';\n    rawCookieOptions.encoding = 'none';\n    if (settings.customSessionIDGenerator) {\n        Hoek.assert(typeof settings.customSessionIDGenerator === 'function', 'customSessionIDGenerator should be a function');\n    }\n\n    // Configure cookie\n\n    server.state(settings.name, settings.cookieOptions);\n\n    // Decorate the server with yar object.\n\n    const getState = () => {\n\n        return {};\n    };\n    server.decorate('request', 'yar', getState, {\n        apply: true\n    });\n\n    // Setup session store\n\n    const cache = server.cache(settings.cache);\n\n    // Pre auth\n\n    server.ext('onPreAuth', (request, reply) => {\n\n        // If this route configuration indicates to skip, do nothing.\n        if (Hoek.reach(request, 'route.settings.plugins.yar.skip')) {\n            return reply.continue();\n        }\n\n        const generateSessionID = () => {\n\n            const id = settings.customSessionIDGenerator ? settings.customSessionIDGenerator(request) : Uuid.v4();\n            Hoek.assert(typeof id === 'string', 'Session ID should be a string');\n            return id;\n        };\n\n        // Load session data from cookie\n\n        const load = () => {\n\n            request.yar = Object.assign(request.yar, request.state[settings.name]);\n            if (request.yar.id) {\n\n                request.yar._isModified = false;\n                if (!settings.errorOnCacheNotReady && !cache.isReady() && !request.yar._store) {\n                    request.log('Cache is not ready: not loading sessions from cache');\n                    request.yar._store = {};\n                }\n                if (request.yar._store) {\n                    return decorate();\n                }\n\n                request.yar._store = {};\n                return cache.get(request.yar.id, (err, value, cached) => {\n\n                    if (err) {\n                        return decorate(err);\n                    }\n\n                    if (cached && cached.item) {\n                        request.yar._store = cached.item;\n                    }\n\n                    return decorate();\n                });\n            }\n\n            request.yar.id = generateSessionID();\n            request.yar._store = {};\n            request.yar._isModified = settings.storeBlank;\n\n            decorate();\n        };\n\n        const decorate = (err) => {\n\n            if (request.yar._store._lazyKeys) {\n                request.yar._isLazy = true;                 // Default to lazy mode if previously set\n                request.yar._store._lazyKeys.forEach((key) => {\n\n                    request.yar[key] = request.yar._store[key];\n                    delete request.yar._store[key];\n                });\n            }\n\n            request.yar.reset = () => {\n\n                cache.drop(request.yar.id, () => {});\n                request.yar.id = generateSessionID();\n                request.yar._store = {};\n                request.yar._isModified = true;\n            };\n\n            request.yar.get = (key, clear) => {\n\n                const value = request.yar._store[key];\n                if (clear) {\n                    request.yar.clear(key);\n                }\n\n                return value;\n            };\n\n            request.yar.set = (key, value) => {\n\n                Hoek.assert(key, 'Missing key');\n                Hoek.assert(typeof key === 'string' || (typeof key === 'object' && value === undefined), 'Invalid yar.set() arguments');\n\n                request.yar._isModified = true;\n\n                if (typeof key === 'string') {\n                    // convert key of type string into an object, for consistency.\n                    const holder = {};\n                    holder[key] = value;\n                    key = holder;\n                }\n\n                Object.keys(key).forEach((name) => {\n\n                    request.yar._store[name] = key[name];\n                });\n\n                return value !== undefined ? value : key;\n            };\n\n            request.yar.clear = (key) => {\n\n                request.yar._isModified = true;\n                delete request.yar._store[key];\n            };\n\n            request.yar.touch = () => {\n\n                request.yar._isModified = true;\n            };\n\n            request.yar.flash = (type, message, isOverride) => {\n\n                let messages;\n                request.yar._isModified = true;\n                request.yar._store._flash = request.yar._store._flash || {};\n\n                if (!type && !message) {\n                    messages = request.yar._store._flash;\n                    request.yar._store._flash = {};\n                    return messages;\n                }\n\n                if (!message) {\n                    messages = request.yar._store._flash[type];\n                    delete request.yar._store._flash[type];\n                    return messages || [];\n                }\n\n                request.yar._store._flash[type] = (isOverride ? message : (request.yar._store._flash[type] || []).concat(message));\n                return request.yar._store._flash[type];\n            };\n\n            request.yar.lazy = (enabled) => {\n\n                request.yar._isLazy = enabled;\n            };\n\n            if (err) {\n                return reply(err);\n            }\n\n            return reply.continue();\n        };\n\n        load();\n    });\n\n    // Post handler\n\n    server.ext('onPreResponse', (request, reply) => {\n\n\n        if (!request.yar._isModified && !request.yar._isLazy) {\n\n            return reply.continue();\n        }\n\n        const prepare = () => {\n\n            if (request.yar._isLazy) {\n                const lazyKeys = [];\n                const keys = Object.keys(request.yar);\n                for (let i = 0; i < keys.length; ++i) {\n                    const key = keys[i];\n                    if (['id', '_store', '_isModified', '_isLazy', 'reset', 'get', 'set', 'clear', 'touch', 'flash', 'lazy'].indexOf(key) === -1 &&\n                        key[0] !== '_' &&\n                        typeof request.yar.key !== 'function') {\n\n                        lazyKeys.push(key);\n                        request.yar._store[key] = request.yar[key];\n                    }\n                }\n\n                if (lazyKeys.length) {\n                    request.yar._store._lazyKeys = lazyKeys;\n                }\n            }\n\n            if (settings.maxCookieSize) {\n                return cookie();\n            }\n\n            return storage();\n        };\n\n        const cookie = function () {\n\n            const content = {\n                id: request.yar.id,\n                _store: request.yar._store\n            };\n\n            Statehood.prepareValue(settings.name, content, settings.cookieOptions, (err, value) => {\n\n                if (err) {\n                    return reply(err);\n                }\n\n                if (value.length > settings.maxCookieSize) {\n                    return storage();\n                }\n\n                reply.state(settings.name, value, rawCookieOptions);\n                return reply.continue();\n            });\n        };\n\n        const storage = () => {\n\n            if (!settings.errorOnCacheNotReady && !cache.isReady()) {\n                request.log('Cache is not ready: not storing sessions to cache');\n                return reply.continue();\n            }\n\n            reply.state(settings.name, { id: request.yar.id });\n            cache.set(request.yar.id, request.yar._store, 0, (err) => {\n\n                if (err) {\n                    return reply(err);\n                }\n\n                return reply.continue();\n            });\n        };\n\n        prepare();\n    });\n\n    return next();\n};\n\n\nexports.register.attributes = {\n    pkg: require('../package.json')\n};\n"}